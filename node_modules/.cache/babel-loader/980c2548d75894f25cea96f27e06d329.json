{"ast":null,"code":"import _objectSpread from \"/Users/lancer_abir/Desktop/react-app-redux/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/lancer_abir/Desktop/react-app-redux/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { createStore } from 'redux';\n/**\n***** Redux .....\n** Store -> (object data) all data store \n* ! Reducer -> (function) A function who returns a specific amount of state or data, Reducer এর মাধ্যমের Store তৈরি করতে হয় \n* ! Actions -> Actions এর মাধ্যমের Reducer change হবে { type: \"name\"  }\n***** React Component .....\n** Dispatch -> যখন action ঘটবে তখন নির্দিষ্ট data Dispatch হয়ে যাবে Store এ\n** Subscriber -> Reducer এর মাধ্যমে Store এ Dispatch data update হলেই Subscriber এ notification পেয়ে যাবে\n**/\n\n/**\n***** Redux এর ক্লিছু builtin function .....\n* ! getState() -> Allow to access to state via \n* ! dispatch(action) -> Allows state to be update via\n* ! subscribe(listener) -> Register listener via\n* ! subscribe(listener) -> Handles unregister ing of listeners via function returned\n**/\n\n/**\n***** todo list .....\n** 1. Create a Reducer\n** 2. Create Store with the help of reducer\n** 3. Now we can subscribe\n** 4. dispatch(action) \n**/\n\nclass App extends Component {\n  render() {\n    // *! 1. Create a Reducer\n    // Reducer 2 টা parameter pass করে (1 - state, 2 - action)\n    const reducer = (state = {}, action) => {\n      if (action.type === \"A\") {\n        return _objectSpread({}, state, {\n          A: \"i am a\"\n        });\n      }\n\n      if (action.type === \"B\") {\n        return _objectSpread({}, state, {\n          B: \"i am b\"\n        });\n      }\n\n      return state;\n    }; // 2. Create Store with the help of Reducer\n\n\n    const store = createStore(reducer); // 3. Subscribe\n\n    store.subscribe(() => {\n      console.log(store.getState());\n    }); // 4. dispatch(action) \n\n    store.dispatch({\n      type: \"B\"\n    });\n    store.dispatch({\n      type: \"hello world\"\n    });\n    store.dispatch({\n      type: \"A\"\n    });\n    store.dispatch({\n      type: \"hello world\"\n    });\n    store.dispatch({\n      type: \"hello world\"\n    });\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"hello kaka\"));\n  }\n\n}\n\nexport default App; // todo list\n// 1. Create a Reducer\n// 2. Create Store with the help of reducer\n// 3. Now we can subscribe\n// 4. dispatch(action)","map":{"version":3,"sources":["/Users/lancer_abir/Desktop/react-app-redux/src/App.js"],"names":["React","Component","createStore","App","render","reducer","state","action","type","A","B","store","subscribe","console","log","getState","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA;;;;;;;;;;AAWA;;;;;;;;AASA;;;;;;;;AASA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AACxBG,EAAAA,MAAM,GAAG;AAEL;AACA;AACA,UAAMC,OAAO,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACpC,UAAIA,MAAM,CAACC,IAAP,KAAgB,GAApB,EAAyB;AACrB,iCACOF,KADP;AAEIG,UAAAA,CAAC,EAAE;AAFP;AAIH;;AACD,UAAIF,MAAM,CAACC,IAAP,KAAgB,GAApB,EAAyB;AACrB,iCACOF,KADP;AAEII,UAAAA,CAAC,EAAE;AAFP;AAIH;;AACD,aAAOJ,KAAP;AACH,KAdD,CAJK,CAqBL;;;AACA,UAAMK,KAAK,GAAGT,WAAW,CAACG,OAAD,CAAzB,CAtBK,CAyBL;;AACAM,IAAAA,KAAK,CAACC,SAAN,CAAgB,MAAM;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,QAAN,EAAZ;AACH,KAFD,EA1BK,CA8BL;;AACAJ,IAAAA,KAAK,CAACK,QAAN,CAAe;AAAER,MAAAA,IAAI,EAAE;AAAR,KAAf;AACAG,IAAAA,KAAK,CAACK,QAAN,CAAe;AAAER,MAAAA,IAAI,EAAE;AAAR,KAAf;AACAG,IAAAA,KAAK,CAACK,QAAN,CAAe;AAAER,MAAAA,IAAI,EAAE;AAAR,KAAf;AACAG,IAAAA,KAAK,CAACK,QAAN,CAAe;AAAER,MAAAA,IAAI,EAAE;AAAR,KAAf;AACAG,IAAAA,KAAK,CAACK,QAAN,CAAe;AAAER,MAAAA,IAAI,EAAE;AAAR,KAAf;AAGA,WACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CADJ;AAKH;;AA5CuB;;AA8C5B,eAAeL,GAAf,C,CAIA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { createStore } from 'redux';\n\n/**\n***** Redux .....\n** Store -> (object data) all data store \n* ! Reducer -> (function) A function who returns a specific amount of state or data, Reducer এর মাধ্যমের Store তৈরি করতে হয় \n* ! Actions -> Actions এর মাধ্যমের Reducer change হবে { type: \"name\"  }\n***** React Component .....\n** Dispatch -> যখন action ঘটবে তখন নির্দিষ্ট data Dispatch হয়ে যাবে Store এ\n** Subscriber -> Reducer এর মাধ্যমে Store এ Dispatch data update হলেই Subscriber এ notification পেয়ে যাবে\n**/\n\n\n/**\n***** Redux এর ক্লিছু builtin function .....\n* ! getState() -> Allow to access to state via \n* ! dispatch(action) -> Allows state to be update via\n* ! subscribe(listener) -> Register listener via\n* ! subscribe(listener) -> Handles unregister ing of listeners via function returned\n**/\n\n\n/**\n***** todo list .....\n** 1. Create a Reducer\n** 2. Create Store with the help of reducer\n** 3. Now we can subscribe\n** 4. dispatch(action) \n**/\n\n\nclass App extends Component {\n    render() {\n\n        // *! 1. Create a Reducer\n        // Reducer 2 টা parameter pass করে (1 - state, 2 - action)\n        const reducer = (state = {}, action) => {\n            if (action.type === \"A\") {\n                return {\n                    ...state,\n                    A: \"i am a\"\n                }\n            }\n            if (action.type === \"B\") {\n                return {\n                    ...state,\n                    B: \"i am b\"\n                }\n            }\n            return state\n        }\n\n\n        // 2. Create Store with the help of Reducer\n        const store = createStore(reducer)\n\n\n        // 3. Subscribe\n        store.subscribe(() => {\n            console.log(store.getState());\n        })\n\n        // 4. dispatch(action) \n        store.dispatch({ type: \"B\" })\n        store.dispatch({ type: \"hello world\" })\n        store.dispatch({ type: \"A\" })\n        store.dispatch({ type: \"hello world\" })\n        store.dispatch({ type: \"hello world\" })\n\n\n        return (\n            <div className=\"App\" >\n                <h1>hello kaka</h1>\n            </div>\n        );\n    }\n}\nexport default App;\n\n\n\n// todo list\n// 1. Create a Reducer\n// 2. Create Store with the help of reducer\n// 3. Now we can subscribe\n// 4. dispatch(action) \n\n\n\n"]},"metadata":{},"sourceType":"module"}